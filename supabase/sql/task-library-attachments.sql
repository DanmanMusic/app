-- supabase/sql/task-library-attachments-rls.sql
-- Apply this using the Supabase Studio SQL Editor or via CLI apply

-- === Storage RLS for 'task-library-attachments' Bucket ===

-- POLICY 1: Allow Active Admin INSERT (Upload)
DROP POLICY IF EXISTS "Allow active admin uploads" ON storage.objects;
CREATE POLICY "Allow active admin uploads"
ON storage.objects FOR INSERT TO authenticated
WITH CHECK (
    bucket_id = 'task-library-attachments'
    AND public.is_active_admin(auth.uid())
);
COMMENT ON POLICY "Allow active admin uploads" ON storage.objects IS 'Allows active Admins to upload to task-library-attachments.';

-- POLICY 2: Allow Active Admin/Teacher SELECT (Read/Download) - BROAD INITIAL POLICY
-- NOTE: For production, reading should ideally be restricted further,
-- likely via signed URLs generated by an Edge Function based on task assignment.
DROP POLICY IF EXISTS "Allow active admin/teacher reads" ON storage.objects;
CREATE POLICY "Allow active admin/teacher reads"
ON storage.objects FOR SELECT TO authenticated
USING (
    bucket_id = 'task-library-attachments'
    AND public.is_active_admin_or_teacher(auth.uid()) -- Allow active admins/teachers to read for now
    -- TODO: Refine this policy later to check task assignment for students/parents
);
COMMENT ON POLICY "Allow active admin/teacher reads" ON storage.objects IS 'Allows active Admins/Teachers to read from task-library-attachments (Initial Broad Policy).';


-- POLICY 3: Allow Active Admin UPDATE
DROP POLICY IF EXISTS "Allow active admin updates" ON storage.objects;
CREATE POLICY "Allow active admin updates"
ON storage.objects FOR UPDATE TO authenticated
USING (
    bucket_id = 'task-library-attachments'
    AND public.is_active_admin(auth.uid())
)
WITH CHECK (
    bucket_id = 'task-library-attachments'
    AND public.is_active_admin(auth.uid())
);
COMMENT ON POLICY "Allow active admin updates" ON storage.objects IS 'Allows active Admins to update objects in task-library-attachments.';


-- POLICY 4: Allow Active Admin DELETE
DROP POLICY IF EXISTS "Allow active admin deletes" ON storage.objects;
CREATE POLICY "Allow active admin deletes"
ON storage.objects FOR DELETE TO authenticated
USING (
    bucket_id = 'task-library-attachments'
    AND public.is_active_admin(auth.uid())
);
COMMENT ON POLICY "Allow active admin deletes" ON storage.objects IS 'Allows active Admins to delete objects from task-library-attachments.';